/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Sens;

/**
 *
 * @author swati
 */
public class ManVS extends javax.swing.JPanel {

    /**
     * Creates new form ManVS
     */
    public ManVS() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        shareVitalInfoJRadioNo = new javax.swing.JRadioButton();
        shareInfo = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        cardiacProblems = new javax.swing.JLabel();
        submitVitalSignsJBtn = new javax.swing.JButton();
        hasCardiacYes = new javax.swing.JRadioButton();
        cancelJBtn = new javax.swing.JButton();
        hasCardiacRadioNo = new javax.swing.JRadioButton();
        vitalSignPanel = new javax.swing.JPanel();
        hasSensorRadioYes = new javax.swing.JRadioButton();
        respRateCheckBox = new javax.swing.JCheckBox();
        getAlertJRadioYes = new javax.swing.JRadioButton();
        sysBPCheckBox = new javax.swing.JCheckBox();
        weightCheckBox = new javax.swing.JCheckBox();
        getAlert = new javax.swing.JLabel();
        sensorDevice = new javax.swing.JLabel();
        getAlertJRadioNo = new javax.swing.JRadioButton();
        vitalSignsTrck = new javax.swing.JLabel();
        hasSensorRadioNo = new javax.swing.JRadioButton();
        heartRateChckBox = new javax.swing.JCheckBox();
        getAlertFromHH = new javax.swing.JLabel();
        shareVitalInfoJRadioYes = new javax.swing.JRadioButton();

        shareVitalInfoJRadioNo.setText("No");
        shareVitalInfoJRadioNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareVitalInfoJRadioNoActionPerformed(evt);
            }
        });

        shareInfo.setText("Would you like to share Vital Sign Information with us :");

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        cardiacProblems.setText("Do you have Cardiac problems ");

        submitVitalSignsJBtn.setText("Submit");
        submitVitalSignsJBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitVitalSignsJBtnActionPerformed(evt);
            }
        });

        hasCardiacYes.setText("Yes");
        hasCardiacYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasCardiacYesActionPerformed(evt);
            }
        });

        cancelJBtn.setText("Cancel");

        hasCardiacRadioNo.setText("No");
        hasCardiacRadioNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasCardiacRadioNoActionPerformed(evt);
            }
        });

        vitalSignPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        hasSensorRadioYes.setText("Yes");
        hasSensorRadioYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasSensorRadioYesActionPerformed(evt);
            }
        });

        respRateCheckBox.setText("Respiratory Rate");

        getAlertJRadioYes.setText("Yes");
        getAlertJRadioYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAlertJRadioYesActionPerformed(evt);
            }
        });

        sysBPCheckBox.setText("Systollic Blood Pressure");

        weightCheckBox.setText("Weight");

        getAlert.setText("Would you like to get alert from Heart Help:");

        sensorDevice.setText("Do you have a sensor device to track Vital Signs");

        getAlertJRadioNo.setText("No");
        getAlertJRadioNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getAlertJRadioNoActionPerformed(evt);
            }
        });

        vitalSignsTrck.setText("Please Select Vital Signs you would like to track:");

        hasSensorRadioNo.setText("No");
        hasSensorRadioNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hasSensorRadioNoActionPerformed(evt);
            }
        });

        heartRateChckBox.setText("Heart Rate");

        org.jdesktop.layout.GroupLayout vitalSignPanelLayout = new org.jdesktop.layout.GroupLayout(vitalSignPanel);
        vitalSignPanel.setLayout(vitalSignPanelLayout);
        vitalSignPanelLayout.setHorizontalGroup(
            vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(vitalSignPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(vitalSignsTrck, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 307, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(sensorDevice, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 302, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(getAlert))
                .add(58, 58, 58)
                .add(vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(weightCheckBox)
                    .add(sysBPCheckBox)
                    .add(vitalSignPanelLayout.createSequentialGroup()
                        .add(getAlertJRadioYes)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(getAlertJRadioNo))
                    .add(vitalSignPanelLayout.createSequentialGroup()
                        .add(hasSensorRadioYes)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(hasSensorRadioNo))
                    .add(respRateCheckBox)
                    .add(heartRateChckBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        vitalSignPanelLayout.setVerticalGroup(
            vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(vitalSignPanelLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .add(vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(sensorDevice)
                    .add(vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(hasSensorRadioYes)
                        .add(hasSensorRadioNo)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(vitalSignsTrck)
                    .add(heartRateChckBox))
                .add(18, 18, 18)
                .add(respRateCheckBox)
                .add(18, 18, 18)
                .add(sysBPCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(weightCheckBox)
                .add(21, 21, 21)
                .add(vitalSignPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(getAlert)
                    .add(getAlertJRadioYes)
                    .add(getAlertJRadioNo))
                .add(53, 53, 53))
        );

        getAlertFromHH.setFont(new java.awt.Font("Malayalam MN", 3, 24)); // NOI18N
        getAlertFromHH.setText("Manage Vital Signs");

        shareVitalInfoJRadioYes.setText("Yes");
        shareVitalInfoJRadioYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shareVitalInfoJRadioYesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(286, 286, 286)
                        .add(getAlertFromHH, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 247, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(204, 204, 204)
                        .add(vitalSignPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(29, 29, 29)
                        .add(backJButton)
                        .add(268, 268, 268)
                        .add(submitVitalSignsJBtn)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cancelJBtn))
                    .add(layout.createSequentialGroup()
                        .add(228, 228, 228)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(365, 365, 365)
                                        .add(hasCardiacYes))
                                    .add(cardiacProblems))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(hasCardiacRadioNo))
                            .add(layout.createSequentialGroup()
                                .add(shareInfo)
                                .add(18, 18, 18)
                                .add(shareVitalInfoJRadioYes)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(shareVitalInfoJRadioNo)))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(getAlertFromHH)
                .add(26, 26, 26)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(shareVitalInfoJRadioYes)
                    .add(shareVitalInfoJRadioNo)
                    .add(shareInfo))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(cardiacProblems)
                        .add(9, 9, 9))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(hasCardiacYes)
                        .add(hasCardiacRadioNo)))
                .add(18, 18, 18)
                .add(vitalSignPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(backJButton)
                    .add(cancelJBtn)
                    .add(submitVitalSignsJBtn))
                .add(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void shareVitalInfoJRadioNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shareVitalInfoJRadioNoActionPerformed
        person.setShareVitalInfo(false);
        vitalSignPanel.setVisible(false);
    }//GEN-LAST:event_shareVitalInfoJRadioNoActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitVitalSignsJBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitVitalSignsJBtnActionPerformed

        try
        {
            if(shareInfoGroup.getSelection() == null || hasCardiacProbGroup.getSelection() == null)
            {
                JOptionPane.showMessageDialog(null, "Please Select a radio button to Let us know if you would like to share Information ","warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if(shareVitalInfoJRadioYes.isSelected() && hasCardiacYes.isSelected())
            {
                person.setShareVitalInfo(true);
                person.setHasCardiacProb(true);

                boolean hR =  false;
                boolean bp = false;
                boolean rr = false;
                boolean wght = false;

                ArrayList<String> vitalSigns = new ArrayList<>();
                if(heartRateChckBox.isSelected())
                {
                    hR=true;
                    vitalSigns.add(heartRateChckBox.getText());
                }
                if(sysBPCheckBox.isSelected())
                {
                    bp = true;
                    vitalSigns.add(sysBPCheckBox.getText());
                }
                if(respRateCheckBox.isSelected())
                {
                    rr = true;
                    vitalSigns.add(respRateCheckBox.getText());
                }
                if(weightCheckBox.isSelected())
                {
                    wght = true;
                    vitalSigns.add(weightCheckBox.getText());
                }
                if(!hR || !bp || !rr || !wght)
                {
                    JOptionPane.showMessageDialog(null, "Please Select all the Checkboxes to track Vital signs","warning", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                person.setVitalSignTrackList(vitalSigns);
            }
            if(hasSensorGroup.getSelection() == null)
            {
                JOptionPane.showMessageDialog(null, "Please Select a radio button to Let us know if you have a sensor device ","warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            if(getAlertsGroup.getSelection() == null)
            {
                JOptionPane.showMessageDialog(null, "Please Select a radio button to Let us know if you would like to get alerts ","warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            // To add vital sign data
            if(person.isShareVitalInfo() && person.isHasSensorDevice())
            {
                person.setHasSensorDevice(true);
                person.addVitalSign();
            }
            JOptionPane.showMessageDialog(null, "Vital Sign information has been updated successfully ","success", JOptionPane.PLAIN_MESSAGE);

            if(person.isShareVitalInfo() && !person.isHasSensorDevice())
            {
                person.setHasSensorDevice(false);
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog(this, "Do you need a sensor ? ", "warning",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION)
                {

                    if(!(userAccount.getWorkQueue().getWorkRequestList().isEmpty()))
                    {
                        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList())
                        {
                            if(request.getMessage().equalsIgnoreCase("Need Sensor Device"))
                            {
                                JOptionPane.showMessageDialog(null, "You have placed a request for sensor device earlier ","warning", JOptionPane.WARNING_MESSAGE);
                                return;
                            }
                        }
                    }

                    String message = "Need Sensor Device";
                    NeedSensorDeviceWorkRequest nsdwr = new NeedSensorDeviceWorkRequest();
                    nsdwr.setMessage("Need Sensor Device");
                    nsdwr.setComments(message);
                    nsdwr.setSender(userAccount);
                    nsdwr.setStatus("Sent");

                    try
                    {
                        for(Network network : ecoSystem.getNetworkList())
                        {
                            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList())
                            {
                                if(enterprise instanceof NonProfitEnterprise)
                                {
                                    if(enterprise.getOrganizationDirectory().getOrganizationList().isEmpty())
                                    {
                                        JOptionPane.showMessageDialog(null, "Donor Organization in Non Profit Enterprise does not exist as of now ","warning", JOptionPane.WARNING_MESSAGE);
                                        return;
                                    }
                                    for(Organization org : enterprise.getOrganizationDirectory().getOrganizationList())
                                    {
                                        org.getWorkQueue().getWorkRequestList().add(nsdwr);
                                    }
                                }
                            }
                        }
                    }
                    catch(NullPointerException npe)
                    {
                        JOptionPane.showMessageDialog(null, "Non Profit Enterprise does not exist as of now ","warning", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    userAccount.getWorkQueue().getWorkRequestList().add(nsdwr);
                    JOptionPane.showMessageDialog(null, "Request has been created successfully", "success", JOptionPane.PLAIN_MESSAGE);

                }
                resetFields();
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Please enter data in all fields  ","warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

    }//GEN-LAST:event_submitVitalSignsJBtnActionPerformed

    private void hasCardiacYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasCardiacYesActionPerformed
        person.setHasCardiacProb(true);
        if(shareVitalInfoJRadioYes.isSelected())
        {
            vitalSignPanel.setVisible(true);
        }
    }//GEN-LAST:event_hasCardiacYesActionPerformed

    private void hasCardiacRadioNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasCardiacRadioNoActionPerformed
        person.setHasCardiacProb(false);
        vitalSignPanel.setVisible(false);
    }//GEN-LAST:event_hasCardiacRadioNoActionPerformed

    private void hasSensorRadioYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasSensorRadioYesActionPerformed
        person.setHasSensorDevice(true);

    }//GEN-LAST:event_hasSensorRadioYesActionPerformed

    private void getAlertJRadioYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAlertJRadioYesActionPerformed
        person.setGetAlerts(true);
    }//GEN-LAST:event_getAlertJRadioYesActionPerformed

    private void getAlertJRadioNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getAlertJRadioNoActionPerformed
        person.setGetAlerts(false);
    }//GEN-LAST:event_getAlertJRadioNoActionPerformed

    private void hasSensorRadioNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hasSensorRadioNoActionPerformed
        person.setHasSensorDevice(false);
    }//GEN-LAST:event_hasSensorRadioNoActionPerformed

    private void shareVitalInfoJRadioYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shareVitalInfoJRadioYesActionPerformed

        person.setShareVitalInfo(true);
        if(hasCardiacYes.isSelected())
        {
            vitalSignPanel.setVisible(true);
        }

    }//GEN-LAST:event_shareVitalInfoJRadioYesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton cancelJBtn;
    private javax.swing.JLabel cardiacProblems;
    private javax.swing.JLabel getAlert;
    private javax.swing.JLabel getAlertFromHH;
    private javax.swing.JRadioButton getAlertJRadioNo;
    private javax.swing.JRadioButton getAlertJRadioYes;
    private javax.swing.JRadioButton hasCardiacRadioNo;
    private javax.swing.JRadioButton hasCardiacYes;
    private javax.swing.JRadioButton hasSensorRadioNo;
    private javax.swing.JRadioButton hasSensorRadioYes;
    private javax.swing.JCheckBox heartRateChckBox;
    private javax.swing.JCheckBox respRateCheckBox;
    private javax.swing.JLabel sensorDevice;
    private javax.swing.JLabel shareInfo;
    private javax.swing.JRadioButton shareVitalInfoJRadioNo;
    private javax.swing.JRadioButton shareVitalInfoJRadioYes;
    private javax.swing.JButton submitVitalSignsJBtn;
    private javax.swing.JCheckBox sysBPCheckBox;
    private javax.swing.JPanel vitalSignPanel;
    private javax.swing.JLabel vitalSignsTrck;
    private javax.swing.JCheckBox weightCheckBox;
    // End of variables declaration//GEN-END:variables
}
